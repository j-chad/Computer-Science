=============
Error Control
=============
One of the problems with computing is that data can be accidentally changed, lost or malformed.
This can be caused by scratches on cd's, A damaged barcode, human error or wifi packets being dropped.
It is very important that we are able to detect any loss or change in data, so that we don't use the incorrect data, which could
prove to be a disaster (e.g. A Bank).

.. note::

   There are two types of errors:
      * Single bit
      * Burst
   | A single bit error occurs when one bit of data is changed.
   | A burst error is when more than one bit of data is changed.


Parity Bits
===========
One of the techniques to detect a change in data is called a parity bit.
This is the simplest error control technique and is simply a bit added on to the data which represents whether
the data has an even amount of ``1``\'s.

+---------------------------+------------+--------+
|            Data           | Parity Bit | Valid? |
+===+===+===+===+===+===+===+============+========+
| 1 | 0 | 0 | 1 | 0 | 0 | 0 |      0     |   Yes  |
+---+---+---+---+---+---+---+------------+--------+

Because there are 2 ``1``'s the parity bit is set to 0. If it was an "odd parity bit" it would instead be set to ``0``.

.. note::

   It does not matter if the parity bit is even or odd,
   as long as all systems that will use the data use the same system.

If a single bit error occurs:

+---------------------------+------------+-------+
|            Data           | Parity Bit | Valid |
+===+===+===+===+===+===+===+============+=======+
| 1 | 0 | 0 | 1 | 0 | 1 | 0 |      0     |   No  |
+---+---+---+---+---+---+---+------------+-------+

We know that the data is incorrect as the parity bit does not match.
This still works even if the parity bit is switched.

A parity bit however, can not tell if the data was modified an even number of times.
If the data above is changed once again, the parity bit will be correct although the data will be different.

+---------------------------+------------+-------+
|            Data           | Parity Bit | Valid |
+===+===+===+===+===+===+===+============+=======+
| 1 | 0 | 1 | 1 | 0 | 1 | 0 |      0     |  Yes  |
+---+---+---+---+---+---+---+------------+-------+

A slightly more advanced version of this is called "Two dimensional Parity".
In two dimensional parity, data is split up into groups and a parity bit is added to each.

+---------------------------+--------+
| Data                      | Parity |
+===+===+===+===+===+===+===+========+
| 1 | 0 | 1 | 1 | 0 | 1 | 0 | 0      |
+---+---+---+---+---+---+---+--------+
| 0 | 0 | 1 | 0 | 1 | 0 | 1 | 1      |
+---+---+---+---+---+---+---+--------+
| 1 | 1 | 0 | 1 | 0 | 0 | 1 | 0      |
+---+---+---+---+---+---+---+--------+
| 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1      |
+---+---+---+---+---+---+---+--------+

We then add the second dimension by appending another group,
which contains the parity for the rows.

+------------+---------------------------+--------+
|            | Data                      | Parity |
+============+===+===+===+===+===+===+===+========+
| **Data**   | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 0      |
+            +---+---+---+---+---+---+---+--------+
|            | 0 | 0 | 1 | 0 | 1 | 0 | 1 | 1      |
+            +---+---+---+---+---+---+---+--------+
|            | 1 | 1 | 0 | 1 | 0 | 0 | 1 | 0      |
+------------+---+---+---+---+---+---+---+--------+
| **Parity** | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1      |
+------------+---+---+---+---+---+---+---+--------+

.. note::
   The bottom right hand corner can be based off of its column or row,
   they should have the same value.

This is a much more effective technique to apply parity than using single dimensional parity and will detect burst errors.
Two dimensional parity means that you would have to flip 4 or more bits in order for a change to go unnoticed.
If a single bit error occurs, the data can be recovered. The main problem with two dimensional parity is the amount of extra data that
needs to be transmitted. For each piece of data you need to send the parity bits will take up :math:`x+y+1` bits (where :math:`x` is the group size, and :math:`y` is the number of groups)
